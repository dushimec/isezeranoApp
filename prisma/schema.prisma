generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SECRETARY
  DISCIPLINARIAN
  SINGER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum EventType {
  REHEARSAL
  SERVICE
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  username     String?   @unique
  email        String?   @unique
  profileImage String?
  role         Role
  password     String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  announcements      Announcement[] @relation("userAnnouncements")
  rehearsals         Rehearsal[]
  services           Service[]
  notifications      Notification[]
  attendance         Attendance[]
  markedAttendance   Attendance[]   @relation("markedAttendance")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  message     String
  attachment  String?
  priority    String?  // "LOW" | "MEDIUM" | "HIGH"
  createdById String
  createdBy   User     @relation("userAnnouncements", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notifications Notification[]
}

model Notification {
  id         String   @id @default(uuid())
  title      String
  message    String
  senderRole Role
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id])
}

model Rehearsal {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  time        String
  location    String
  notes       String?
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attendance  Attendance[] @relation("rehearsalAttendance")
}

model Service {
  id            String   @id @default(uuid())
  title         String
  date          DateTime
  time          String
  churchLocation String
  attire        String?
  notes         String?
  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  attendance     Attendance[] @relation("serviceAttendance")
}

model Attendance {
  id         String          @id @default(uuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  eventType  EventType
  rehearsal  Rehearsal?      @relation("rehearsalAttendance", fields: [eventId], references: [id], onDelete: Cascade, map: "attendance_rehearsal_id_fkey")
  service    Service?        @relation("serviceAttendance", fields: [eventId], references: [id], onDelete: Cascade, map: "attendance_service_id_fkey")
  eventId    String
  status     AttendanceStatus
  markedById String
  markedBy   User            @relation("markedAttendance", fields: [markedById], references: [id])
  createdAt  DateTime        @default(now())
}
